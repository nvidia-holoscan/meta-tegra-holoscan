diff -urN Linux_for_Tegra.orig/tools/gen_uefi_default_keys_dts.sh Linux_for_Tegra/tools/gen_uefi_default_keys_dts.sh
--- Linux_for_Tegra.orig/tools/gen_uefi_default_keys_dts.sh	2023-09-19 10:55:08.033037928 -0600
+++ Linux_for_Tegra/tools/gen_uefi_default_keys_dts.sh	2023-09-19 11:09:50.702063771 -0600
@@ -74,6 +74,17 @@
 #   UEFI_APPEND_DB_ESL_FILE_1="db_3.esl"
 #   UEFI_APPEND_DB_ESL_FILE_2="db_4.esl"
 #
+# The following variables can also be set to 1 in the <uefi_keys.conf> file to
+# enable downloading and appending the corresponding Microsoft keys:
+#
+#   UEFI_KEK_APPEND_MSFT     - Appends the Microsoft KEK
+#   UEFI_DB_APPEND_MSFT_UEFI - Appends the Microsoft Corporation UEFI CA 2011
+#
+# The following variable can also be set to 1 in the <uefi_keys.conf> file to
+# enable downloading and appending the UEFI Revocation List (dbx).
+#
+#   UEFI_DBX_APPEND_UEFI_REVOCATION_LIST
+#
 # Notes:
 #   1). All files specified in <uefi_keys.conf> must be in the same directory
 #       of <uefi_keys.conf>.
@@ -308,6 +319,45 @@
 rm -rf ${OUT_DIR}
 mkdir ${OUT_DIR}
 
+MSFT_URL_PREFIX="https://www.microsoft.com/pkiops/certs"
+
+if [ "${UEFI_KEK_APPEND_MSFT}" = "1" ]; then
+	echo "Downloading the Microsoft KEK"
+	UEFI_KEK_MSFT_BASENAME="MicCorKEKCA2011_2011-06-24"
+	if ! curl -s -o ${OUT_DIR}/${UEFI_KEK_MSFT_BASENAME}.crt ${MSFT_URL_PREFIX}/${UEFI_KEK_MSFT_BASENAME}.crt; then
+		echo "Error: Microsoft KEK download failed"
+		exit 1
+	fi
+	if ! echo "31590bfd89c9d74ed087dfac66334b3931254b30 ${OUT_DIR}/${UEFI_KEK_MSFT_BASENAME}.crt" | sha1sum -c -; then
+		echo "Error: Microsoft KEK checksum mismatch"
+		exit 1
+	fi
+fi
+
+if [ "${UEFI_DB_APPEND_MSFT_UEFI}" = "1" ]; then
+	echo "Downloading the Microsoft Corporation UEFI CA 2011"
+	UEFI_DB_MSFT_UEFI_BASENAME="MicCorUEFCA2011_2011-06-27"
+	if ! curl -s -o ${OUT_DIR}/${UEFI_DB_MSFT_UEFI_BASENAME}.crt ${MSFT_URL_PREFIX}/${UEFI_DB_MSFT_UEFI_BASENAME}.crt; then
+		echo "Error: Microsoft Corporation UEFI CA 2011 download failed"
+		exit 1
+	fi
+	if ! echo "46def63b5ce61cf8ba0de2e6639c1019d0ed14f3 ${OUT_DIR}/${UEFI_DB_MSFT_UEFI_BASENAME}.crt" | sha1sum -c -; then
+		echo "Error: Microsoft Corporation UEFI CA 2011 checksum mismatch"
+		exit 1
+	fi
+fi
+
+UEFI_URL_PREFIX="https://uefi.org/sites/default/files/resources"
+
+if [ "${UEFI_DBX_APPEND_UEFI_REVOCATION_LIST}" = "1" ]; then
+	echo "Downloading the UEFI Revocation List"
+	UEFI_DBX_REVOCATION_LIST_BASENAME="arm64_DBXUpdate"
+	if ! curl -s -o ${OUT_DIR}/${UEFI_DBX_REVOCATION_LIST_BASENAME}.bin ${UEFI_URL_PREFIX}/${UEFI_DBX_REVOCATION_LIST_BASENAME}.bin; then
+		echo "Error: UEFI Revocation List download failed"
+		exit 1
+	fi
+fi
+
 # Generate all *.cer, *.esl and *.auth files in _out directory
 # All .cer, .esl and .auth names are based on the .key name (UEFI_XX_KEY_FILE)
 #
@@ -341,6 +391,25 @@
 	sign-efi-sig-list -k "${UEFI_KEK_KEY_FILE}" -c "${UEFI_KEK_CERT_FILE}" db ${OUT_DIR}/"${UEFI_DB_2_BASENAME}".esl ${OUT_DIR}/"${UEFI_DB_2_BASENAME}".auth
 fi
 
+# Generate the Microsoft KEK esl
+if [ "${UEFI_KEK_MSFT_BASENAME}" ]; then
+	sbsiglist --owner 77fa9abd-0359-4d32-bd60-28f4e78f784b --type x509 --output ${OUT_DIR}/${UEFI_KEK_MSFT_BASENAME}.esl ${OUT_DIR}/${UEFI_KEK_MSFT_BASENAME}.crt
+fi
+
+# Generate the Microsoft UEFI db esl
+if [ "${UEFI_DB_MSFT_UEFI_BASENAME}" ]; then
+	sbsiglist --owner 77fa9abd-0359-4d32-bd60-28f4e78f784b --type x509 --output ${OUT_DIR}/${UEFI_DB_MSFT_UEFI_BASENAME}.esl ${OUT_DIR}/${UEFI_DB_MSFT_UEFI_BASENAME}.crt
+fi
+
+# Generate the UEFI revocation list esl
+if [ "${UEFI_DBX_REVOCATION_LIST_BASENAME}" ]; then
+	script_dir=$(dirname $(readlink -f ${0}))
+	if ! python3 ${script_dir}/splitdbxcontent.py ${OUT_DIR}/${UEFI_DBX_REVOCATION_LIST_BASENAME}.bin ${OUT_DIR}; then
+		echo "Error: Generating UEFI revocation list esl failed"
+		exit 1
+	fi
+fi
+
 ### Begin generating dts file:
 dts_header;
 
@@ -351,6 +420,10 @@
 	data=$(od -t x1 -An ${OUT_DIR}/"${UEFI_DB_2_BASENAME}".esl)
 	echo "${data}" >> ${dts_file}
 fi
+if [ "${UEFI_DB_MSFT_UEFI_BASENAME}" ]; then
+	data=$(od -t x1 -An ${OUT_DIR}/"${UEFI_DB_MSFT_UEFI_BASENAME}".esl)
+	echo "${data}" >> ${dts_file}
+fi
 if [ "${UEFI_APPEND_DB_ESL_FILE_1}" ]; then
 	if [ ! -f "${UEFI_APPEND_DB_ESL_FILE_1}" ]; then
 		echo "${UEFI_APPEND_DB_ESL_FILE_1} does not exist"
@@ -370,14 +443,22 @@
 fi
 dbdefault_tail;
 
-if [ "${UEFI_DBX_ESL_FILE_1}" ]; then
-	if [ ! -f "${UEFI_DBX_ESL_FILE_1}" ]; then
-		echo "${UEFI_DBX_ESL_FILE_1} does not exist"
-		exit 1
-	fi
+
+if [ "${UEFI_DBX_ESL_FILE_1}" ] || [ "${UEFI_DBX_REVOCATION_LIST_BASENAME}" ]; then
 	dbxdefault_header;
-	data=$(od -t x1 -An ./"${UEFI_DBX_ESL_FILE_1}")
-	echo "${data}" >> ${dts_file}
+	if [ "${UEFI_DBX_REVOCATION_LIST_BASENAME}" ]; then
+		data=$(od -t x1 -An ${OUT_DIR}/"${UEFI_DBX_REVOCATION_LIST_BASENAME}".esl)
+		echo "${data}" >> ${dts_file}
+	fi
+
+	if [ "${UEFI_DBX_ESL_FILE_1}" ]; then
+		if [ ! -f "${UEFI_DBX_ESL_FILE_1}" ]; then
+			echo "${UEFI_DBX_ESL_FILE_1} does not exist"
+			exit 1
+		fi
+		data=$(od -t x1 -An ./"${UEFI_DBX_ESL_FILE_1}")
+		echo "${data}" >> ${dts_file}
+	fi
 
 	if [ "${UEFI_DBX_ESL_FILE_2}" ]; then
 		if [ ! -f "${UEFI_DBX_ESL_FILE_2}" ]; then
@@ -394,6 +475,11 @@
 data=$(od -t x1 -An ${OUT_DIR}/"${UEFI_KEK_BASENAME}".esl)
 echo "${data}" >> ${dts_file}
 
+if [ "${UEFI_KEK_MSFT_BASENAME}" ]; then
+	data=$(od -t x1 -An ${OUT_DIR}/"${UEFI_KEK_MSFT_BASENAME}".esl)
+	echo "${data}" >> ${dts_file}
+fi
+
 if [ "${UEFI_APPEND_KEK_ESL_FILE_1}" ]; then
 	if [ ! -f "${UEFI_APPEND_KEK_ESL_FILE_1}" ]; then
 		echo "${UEFI_APPEND_KEK_ESL_FILE_1} does not exist"
diff -urN Linux_for_Tegra.orig/tools/splitdbxcontent.py Linux_for_Tegra/tools/splitdbxcontent.py
--- Linux_for_Tegra.orig/tools/splitdbxcontent.py	1969-12-31 17:00:00.000000000 -0700
+++ Linux_for_Tegra/tools/splitdbxcontent.py	2023-09-19 11:06:43.079623558 -0600
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+#
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+# DEALINGS IN THE SOFTWARE.
+
+import sys
+import os
+
+def usage():
+    sys.exit(f"Usage: {sys.argv[0]} {{DBX update binary}} {{output directory}}")
+
+if len(sys.argv) != 3:
+    usage()
+
+# Read the input file.
+with open(sys.argv[1], mode='rb') as f:
+    file = f.read()
+basename = os.path.basename(sys.argv[1]).split('.')[0]
+
+# Strip the header.
+chop = file[40:]
+if chop[0] != 0x30 or chop[1] != 0x82:
+    sys.exit("Cannot find signature")
+
+# Determine the signature length.
+sig_len = (chop[2] * 256) + chop[3] + 4
+if sig_len > len(file):
+    sys.exit("Signature longer than file size!")
+
+# Write the signature file.
+sig_file = f"{sys.argv[2]}/{basename}.sig"
+with open(sig_file, mode='wb') as f:
+    f.write(chop[:sig_len])
+    print(f"Wrote output file {sig_file}")
+
+# Write the content file.
+content_file = f"{sys.argv[2]}/{basename}.esl"
+with open(content_file, mode='wb') as f:
+    f.write(chop[sig_len:])
+    print(f"Wrote output file {content_file}")
