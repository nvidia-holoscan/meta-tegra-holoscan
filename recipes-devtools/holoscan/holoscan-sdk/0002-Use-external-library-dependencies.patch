From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ian Stewart <istewart@nvidia.com>
Date: Mon, 12 Jun 2023 15:05:29 -0600
Subject: Use external library dependencies

This changes the dependencies on the following libraries so
that they are provided at build time instead of being
fetched, built, and installed by CMake:

 - ajantv2
 - glfw3
 - yaml-cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 661caf5..62eef86 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -239,14 +239,6 @@ if(HOLOSCAN_BUILD_ORT)
     list(APPEND HOLOSCAN_INSTALL_TARGETS holoinfer_ort)
 endif()
 
-# Add PUBLIC dependencies to our install target
-# Note: required due to. However, could only export but not install?
-# TODO: work on limiting PUBLIC dependencies by not including third-party
-# headers in our nterface headers, using forward declaration or PIMPL
-list(APPEND HOLOSCAN_INSTALL_TARGETS
-    yaml-cpp   # needed by holoscan::core
-)
-
 # Copy library files
 install(TARGETS ${HOLOSCAN_INSTALL_TARGETS}
     DESTINATION ${HOLOSCAN_INSTALL_LIB_DIR}
diff --git a/cmake/deps/glfw_rapids.cmake b/cmake/deps/glfw_rapids.cmake
index 14a0707..5c61fd1 100644
--- a/cmake/deps/glfw_rapids.cmake
+++ b/cmake/deps/glfw_rapids.cmake
@@ -68,22 +68,7 @@ if(NOT Wayland_FOUND)
     message(FATAL_ERROR "Wayland not found. Please install Wayland development files ('sudo apt-get install libwayland-dev') and try again.")
 endif()
 
-rapids_cpm_find(GLFW 3.4
-    GLOBAL_TARGETS glfw
-
-    CPM_ARGS
-
-    GITHUB_REPOSITORY glfw/glfw
-    GIT_TAG 3.4
-    OPTIONS
-    "BUILD_SHARED_LIBS OFF"
-    "CXXOPTS_BUILD_EXAMPLES OFF"
-    "CXXOPTS_BUILD_TESTS OFF"
-    "GLFW_BUILD_X11 ON"
-    "GLFW_BUILD_WAYLAND ON"
-    "GLFW_BUILD_TESTS OFF"
-    "GLFW_BUILD_EXAMPLES OFF"
-    "GLFW_BULID_DOCS OFF"
-    "GLFW_INSTALL OFF"
-    EXCLUDE_FROM_ALL
-)
+# Note that Holoscan SDK currently requires version 3.4, but that is due to the
+# improved Wayland support which is not yet enabled for GLFW in OpenEmbedded.
+# We will continue to use 3.3 until Wayland support is available.
+rapids_find_package(glfw3 3.3 REQUIRED)
diff --git a/cmake/deps/yaml-cpp_rapids.cmake b/cmake/deps/yaml-cpp_rapids.cmake
index fd18358..43028b0 100644
--- a/cmake/deps/yaml-cpp_rapids.cmake
+++ b/cmake/deps/yaml-cpp_rapids.cmake
@@ -16,57 +16,4 @@
 # https://docs.rapids.ai/api/rapids-cmake/stable/command/rapids_find_package.html#
 include(${rapids-cmake-dir}/cpm/find.cmake)
 
-# Unfortunately, yaml-cpp project's CMakeLists.txt registers the user package
-# (see below) which creates an item in '~/.cmake/packages/yaml-cpp/' and makes
-# `find_package()` command in CPM try to look at the registered packages for
-# 'yaml-cpp'.
-# If the user configures CMake build twice consecutively without building
-# source, the second configure will use a package in the user package registry
-# (specified by '~/.cmake/packages/yaml-cpp/xxxxx' which refers to
-# '${CMAKE_BINARY_DIR}/_deps/yaml-cpp-build')
-# causing a failure when building the source tree because
-# '_deps/yaml-cpp-build/libyaml-cpp.a', needed by'libholoscan.so' is
-# missing.
-#
-# export(PACKAGE yaml-cpp)
-#
-# To prevent the situation, we set CMAKE_FIND_USE_PACKAGE_REGISTRY to FALSE
-# (https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_USE_PACKAGE_REGISTRY.html#variable:CMAKE_FIND_USE_PACKAGE_REGISTRY)
-set(CMAKE_FIND_USE_PACKAGE_REGISTRY FALSE)
-
-set(patch_command ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_SOURCE_DIR}/patches/yaml-cpp.patch <SOURCE_DIR> && git apply <SOURCE_DIR>/yaml-cpp.patch)
-
-# https://github.com/cpm-cmake/CPM.cmake/wiki/More-Snippets#yaml-cpp
-set(YAML_CPP_CPM_ARGS
-    GITHUB_REPOSITORY jbeder/yaml-cpp
-    GIT_TAG yaml-cpp-0.7.0
-    PATCH_COMMAND ${patch_command}
-    OPTIONS
-    "YAML_CPP_BUILD_TESTS Off"
-    "YAML_CPP_BUILD_CONTRIB Off"
-    "YAML_CPP_BUILD_TOOLS Off"
-    "YAML_BUILD_SHARED_LIBS Off"
-)
-rapids_cpm_find(yaml-cpp 0.7.0
-    GLOBAL_TARGETS yaml-cpp
-    BUILD_EXPORT_SET ${HOLOSCAN_PACKAGE_NAME}-exports
-
-    CPM_ARGS
-    ${YAML_CPP_CPM_ARGS}
-)
-
-if(yaml-cpp_ADDED)
-    set_target_properties(yaml-cpp PROPERTIES POSITION_INDEPENDENT_CODE ON)
-
-    # Install the headers needed for development with the SDK
-    install(DIRECTORY ${yaml-cpp_SOURCE_DIR}/include/yaml-cpp
-        DESTINATION "include"
-        COMPONENT "holoscan-dependencies"
-        )
-
-    # Install the target
-    install(TARGETS yaml-cpp
-        DESTINATION "${HOLOSCAN_INSTALL_LIB_DIR}"
-        COMPONENT "holoscan-dependencies"
-    )
-endif()
+rapids_find_package(yaml-cpp 0.7.0 REQUIRED)
-- 
2.34.1

