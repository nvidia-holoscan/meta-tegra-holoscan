From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ian Stewart <istewart@nvidia.com>
Date: Mon, 12 Jun 2023 15:00:47 -0600
Subject: Fix GXF TypenameAsString error


diff --git a/include/holoscan/core/gxf/entity.hpp b/include/holoscan/core/gxf/entity.hpp
index 5646914ef..50cfab9b0 100644
--- a/include/holoscan/core/gxf/entity.hpp
+++ b/include/holoscan/core/gxf/entity.hpp
@@ -74,7 +74,7 @@ class Entity : public nvidia::gxf::Entity {
     // Try to get nvidia::gxf::Tensor from GXF Entity.
     gxf_tid_t tid;
     auto tid_result =
-        GxfComponentTypeId(context(), nvidia::TypenameAsString<nvidia::gxf::Tensor>(), &tid);
+        GxfComponentTypeId(context(), TypenameAsString<nvidia::gxf::Tensor>(), &tid);
     if (tid_result != GXF_SUCCESS) {
       if (log_errors) {
         HOLOSCAN_LOG_ERROR(
@@ -115,7 +115,7 @@ class Entity : public nvidia::gxf::Entity {
   void add(std::shared_ptr<DataT>& data, const char* name = nullptr) {
     gxf_tid_t tid;
     HOLOSCAN_GXF_CALL_FATAL(
-        GxfComponentTypeId(context(), nvidia::TypenameAsString<nvidia::gxf::Tensor>(), &tid));
+        GxfComponentTypeId(context(), TypenameAsString<nvidia::gxf::Tensor>(), &tid));
 
     gxf_uid_t cid;
     HOLOSCAN_GXF_CALL_FATAL(GxfComponentAdd(context(), eid(), tid, name, &cid));
diff --git a/include/holoscan/core/gxf/gxf_utils.hpp b/include/holoscan/core/gxf/gxf_utils.hpp
index 5076f046a..999ce4e6e 100644
--- a/include/holoscan/core/gxf/gxf_utils.hpp
+++ b/include/holoscan/core/gxf/gxf_utils.hpp
@@ -198,7 +198,7 @@ inline gxf_uid_t find_component_handle(gxf_context_t context, gxf_uid_t componen
 
   // Get the type id of the component we are are looking for.
   gxf_tid_t tid;
-  const gxf_result_t result_2 = GxfComponentTypeId(context, ::nvidia::TypenameAsString<S>(), &tid);
+  const gxf_result_t result_2 = GxfComponentTypeId(context, TypenameAsString<S>(), &tid);
   if (result_2 != GXF_SUCCESS) { return 0; }
 
   // Find the component in the indicated entity
diff --git a/include/holoscan/core/io_context.hpp b/include/holoscan/core/io_context.hpp
index 1015645b2..4f1997e53 100644
--- a/include/holoscan/core/io_context.hpp
+++ b/include/holoscan/core/io_context.hpp
@@ -253,7 +253,7 @@ class InputContext {
           auto error_message = fmt::format(
               "Unable to cast the received data to the specified type ({}) for input '{}' of type "
               "{}: {}",
-              nvidia::TypenameAsString<DataT>(),
+              TypenameAsString<DataT>(),
               name,
               value.type().name(),
               e.what());
@@ -302,7 +302,7 @@ class InputContext {
           auto error_message = fmt::format(
               "Unable to cast the received data to the specified type ({}) for input '{}:{}' of "
               "type {}: {}",
-              nvidia::TypenameAsString<DataT>(),
+              TypenameAsString<DataT>(),
               name,
               index,
               value.type().name(),
@@ -425,7 +425,7 @@ class InputContext {
       auto error_message = fmt::format(
           "Unable to cast the received data to the specified type ({}) for input {} of type {}: "
           "{}",
-          nvidia::TypenameAsString<DataT>(),
+          TypenameAsString<DataT>(),
           name,
           value_type.name(),
           exception_message);
diff --git a/src/core/gxf/entity.cpp b/src/core/gxf/entity.cpp
index dcb220946..d2b23e96e 100644
--- a/src/core/gxf/entity.cpp
+++ b/src/core/gxf/entity.cpp
@@ -47,7 +47,7 @@ nvidia::gxf::Handle<nvidia::gxf::VideoBuffer> get_videobuffer(Entity entity, con
 
   gxf_tid_t tid;
   auto tid_result = GxfComponentTypeId(
-      entity.context(), nvidia::TypenameAsString<nvidia::gxf::VideoBuffer>(), &tid);
+      entity.context(), TypenameAsString<nvidia::gxf::VideoBuffer>(), &tid);
   if (tid_result != GXF_SUCCESS) {
     throw std::runtime_error(fmt::format("Unable to get component type id: {}", tid_result));
   }
-- 
2.34.1

